Factory of Factories
solves the problem of creating families of related products.
Defining a interface to create families of dependent objects without specifing concrete classes

It provides an interface for creating families of related or dependent objects without specifying their concrete classes.

It is useful where:
You need to create objects that must be used together and part of a consistent family (e.g. GUI elements like buttons, checkboxes, and menus).
Your system must support multiple configurations, environment, or product variants (e.g. windows vs macOS UI).
You want to enforce consistency across related objects, ensuring that they are all created from the same factory.


#include <iostream>
#include <memory>
using namespace std;

// ===== Abstract Products =====
class Button {
public:
    virtual void render() = 0;
    virtual ~Button() {}
};

class Checkbox {
public:
    virtual void render() = 0;
    virtual ~Checkbox() {}
};

// ===== Concrete Products - Windows Family =====
class WinButton : public Button {
public:
    void render() override {
        cout << "Rendering Windows Button" << endl;
    }
};

class WinCheckbox : public Checkbox {
public:
    void render() override {
        cout << "Rendering Windows Checkbox" << endl;
    }
};

// ===== Concrete Products - Mac Family =====
class MacButton : public Button {
public:
    void render() override {
        cout << "Rendering Mac Button" << endl;
    }
};

class MacCheckbox : public Checkbox {
public:
    void render() override {
        cout << "Rendering Mac Checkbox" << endl;
    }
};

// ===== Abstract Factory =====
class GUIFactory {
public:
    virtual unique_ptr<Button> createButton() = 0;
    virtual unique_ptr<Checkbox> createCheckbox() = 0;
    virtual ~GUIFactory() {}
};

// ===== Concrete Factories =====
class WinFactory : public GUIFactory {
public:
    unique_ptr<Button> createButton() override {
        return make_unique<WinButton>();
    }

    unique_ptr<Checkbox> createCheckbox() override {
        return make_unique<WinCheckbox>();
    }
};

class MacFactory : public GUIFactory {
public:
    unique_ptr<Button> createButton() override {
        return make_unique<MacButton>();
    }

    unique_ptr<Checkbox> createCheckbox() override {
        return make_unique<MacCheckbox>();
    }
};

// ===== Client Code =====
void clientCode(GUIFactory& factory) {
    auto button = factory.createButton();
    button->render();

    auto checkbox = factory.createCheckbox();
    checkbox->render();
}

// ===== Main =====
int main() {
    cout << "--- Using Mac Factory ---" << endl;
    MacFactory macFactory;
    clientCode(macFactory);

    cout << "\n--- Using Windows Factory ---" << endl;
    WinFactory winFactory;
    clientCode(winFactory);

    return 0;
}
